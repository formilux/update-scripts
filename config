#!/bin/sh

config_restore() {
  local tmp="$1"
  if [ $(tar ztf "$tmp" 2>/dev/null | wc -l) -eq 0 ]; then
    echo "Invalid file. Aborting."
    return 1
  fi
  if restore-etc -f "$tmp" && save-etc -f; then
    echo "Configuration restored. You may edit it and reboot."
    return 0
  else
    echo "Error during configuration restore. Aborting."
    return 1
  fi
}

do_help() {
  echo "Usage: ${arg0##*/} <command> [args...]"
  echo "Valid commands :"
  echo "  edit               : edits system configuration (/etc/config.rc)."
  echo "  changes [ -q ]     : displays a list of files that have changed."
  echo "  write, write flash : writes changes to flash"
  echo "  write <file>       : writes changes to <file>"
  echo "  write -            : writes changes to stdout (for use in scripts)"
  echo "  save               : alias for 'write flash'"
  echo "  send tftp://url/   : uploads a config via tftp"
  echo "  read <file>        : read configuration from <file>"
  echo "  read -             : read configuration from stdin (for use in scripts)"
  echo "  fetch proto://url/ : downloads a config (tftp, http)"
}

do_write() {
  local target="$1"
  shift
  case "$target" in
    flash|"") save-etc "$@" ;;
    "-")      save-etc -s ;;
    *)        save-etc -s > "$target" ;;
  esac
}

do_changes() {
  local list
  if [ "$1" = "-q" ]; then
    save-etc -v -l
  else
    list="$(save-etc -v -l)"
    if [ "$?" -eq 0 -a -n "$list" ]; then
      ( cd / ; ls -adrlt $list )
    fi
  fi
}

do_send() {
  local proto server defp port file tmp

  file="$1"; proto=""; server=""; port=""
  [ -z "${file##*://*}" ] && proto="${file%%://*}"
  file="${file#*://}" ; proto="${proto:-tftp}"

  case "$proto" in
    tftp) defp=69;;
    *) echo "Unsupported protocol for send operation : $proto";return 1;;
  esac

  [ -n "${file}" -a -z "${file##*/*}" ] || file="${file}/"
  server="${file%%/*}"
  if [ -n "$server" ]; then
    file="/${file#*/}"
  fi
  [ -z "${server##*:*}" ] && port="${server#*:}"
  server="${server%%:*}" ; port="${port:-$defp}"
  if [ -z "$server" ]; then
    read -p "Enter server address for $proto download : " server
    if [ -z "$server" ]; then echo "Aborting."; return 1; fi
  fi
  if [ -z "${file%%*/}" ]; then
    tmp="${file}$(uname -n)-$(date +%Y%m%d-%H%M).bin"
    echo "Using $tmp as the default remote file name."
    read -p "Enter file location on $server : " file
    [ -z "$file" ] && file="$tmp"
  fi

  rm -rf /tmp/.config.*.* 2>/dev/null
  tmp="/tmp/.config.$$.$RANDOM"
  while ! mkdir -m 0700 $tmp; do
    tmp="/tmp/.config.$$.$RANDOM"
  done
  tmp="$tmp/send"

  rm -f "$tmp"
  if ! save-etc -s >"$tmp"; then
    echo "Error while making local configuration image. Aborting."
    rm -f "$tmp" ; rmdir "${tmp%/*}"
    return 1
  fi

  file="${file#/}"
  #echo "proto=$proto server=$server port=$port file=$file"
  echo "Sending current configuration to $proto://$server:$port/$file ..."

  if [ "$proto" = "tftp" ]; then
    if ! tftp "$server" "$port" -c put "$tmp" "${file#/}"; then
      echo "Error during transfer. Aborting."
      rm -f "$tmp" ; rmdir "${tmp%/*}"
      return 1
    else
      echo "Configuration successfully saved."
      rm -f "$tmp" ; rmdir "${tmp%/*}"
      return 0
    fi
  fi
  # unknown proto
  rm -f "$tmp" ; rmdir "${tmp%/*}"
  return 1
}


do_fetch() {
  local proto server defp port file tmp err

  file="$1"; proto=""; server=""; port=""
  [ -z "${file##*://*}" ] && proto="${file%%://*}"
  file="${file#*://}" ; proto="${proto:-tftp}"

  case "$proto" in
    tftp) defp=69;;
    http) defp=80;;
    *) echo "Unsupported protocol for fetch operation : $proto";return 1;;
  esac

  [ -z "${file##*/*}" ] && server="${file%%/*}"
  if [ -n "$server" ]; then
    file="/${file#*/}"
  fi
  [ -z "${server##*:*}" ] && port="${server#*:}"
  server="${server%%:*}" ; port="${port:-$defp}"
  if [ -z "$server" ]; then
    read -p "Enter server address for $proto download : " server
    if [ -z "$server" ]; then echo "Aborting."; return 1; fi
  fi
  if [ -z "$file" ]; then
    read -p "Enter file location on $server : " file
    if [ -z "$file" ]; then echo "Aborting."; return 1; fi
  fi

  file="${file#/}"
  #echo "proto=$proto server=$server port=$port file=$file"
  echo "Fetching $proto://$server:$port/$file ..."

  rm -rf /tmp/.config.*.* 2>/dev/null
  tmp="/tmp/.config.$$.$RANDOM"
  while ! mkdir -m 0700 $tmp; do
    tmp="/tmp/.config.$$.$RANDOM"
  done
  tmp="$tmp/fetch"

  rm -f "$tmp"
  if [ "$proto" = "tftp" ]; then
    tftp "$server" "$port" -c get "$file" "$tmp"
  else
    ( exec <>/dev/tcp/$server/$port &&
      printf "GET /$file HTTP/1.0\r\nHost: $server:$port\r\n\r\n" >&0 &&
      while read -t 10 rep; do
        if [ ${#rep} -lt 2 ]; then
          dd of="$tmp" 2>/dev/null
          break
        fi
      done
    )
  fi
  if [ ! -s "$tmp" ]; then
    echo "Error during transfer. Aborting."
    rm -f "$tmp" ; rmdir "${tmp%/*}"
    return 1
  fi
  echo "Transfer complete."

  config_restore "$tmp" ; err=$?
  rm -f "$tmp" ; rmdir "${tmp%/*}"
  return $err
}

do_read() {
  local src err tmp

  src="$1"
  shift

  case "$src" in
    "") do_help; return 1;;
    "-")
	rm -rf /tmp/.config.*.* 2>/dev/null
	tmp="/tmp/.config.$$.$RANDOM"
	while ! mkdir -m 0700 $tmp; do
	    tmp="/tmp/.config.$$.$RANDOM"
	done
	tmp="$tmp/read"; rm -f "$tmp"
	dd of="$tmp" && config_restore "$tmp" ; err="$?"
	rm -f "$tmp" ; rmdir "${tmp%/*}"
	return $err
	;;
    *)  config_restore "$src" ;;
  esac
}

# may be called with service name in $1 and instance name in $2. Starts vi on the
# first line related to the service and instance.
do_edit() {
  local line
  line=$(grep -m1 -n "^[[:space:]]*service[[:space:]]\+$1[[:space:]]*$2" /etc/config.rc|cut -f1 -d:)
  vi ${line+-c ":$line"} /etc/config.rc
}

arg0="$0"
cmd="$1"
shift
case "$cmd" in
  edit)    do_edit "$@" ;;
  changes) do_changes "$@" ;;
  write)   do_write "$@" ;;
  save)    do_write flash ;;
  send)    do_send "$@" ;;
  read)    do_read "$@" ;;
  fetch)   do_fetch "$@" ;;
  *)
    do_help "$@"
    [ "$cmd" = "help" -o "$cmd" = "-h" ]
    exit $?
    ;;
esac

