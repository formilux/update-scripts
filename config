#!/bin/sh

config_restore() {
  local tmp="$1"
  if [ $(tar ztf "$tmp" 2>/dev/null | wc -l) -eq 0 ]; then
    echo "Invalid file. Aborting."
    return 1
  fi
  if restore-etc -f "$tmp" && save-etc -f; then
    echo "Configuration restored. You may edit it and reboot."
    return 0
  else
    echo "Error during configuration restore. Aborting."
    return 1
  fi
}

do_help() {
  echo "Usage: ${arg0##*/} [-f] <command> [args...]"
  echo "Valid commands :"
  echo "  edit                   : edits system configuration (/etc/config.rc)."
  echo "  get <svc>[.<inst>] <var>[-<var>]         : retrieve a config key."
  echo "  set <svc>[.<inst>] <var>[-<var>] <val>   : add/replace a config key."
  echo "  add <svc>[.<inst>] <var>[-<var>] <val>   : add a config key."
  echo "  del <svc>[.<inst>] <var>[-<var>] [<val>] : remove a config key."
  echo "  changes [ -q ]         : displays a list of files that have changed."
  echo "  diff [[flash]|factory] : shows difference from these configs."
  echo "  write, write flash     : writes changes to flash"
  echo "  write <file>           : writes changes to <file>"
  echo "  write -                : writes changes to stdout (for use in scripts)"
  echo "  save                   : alias for 'write flash'"
  echo "  send tftp://url/       : uploads a config via tftp"
  echo "  read <file>            : read configuration from <file>"
  echo "  read -                 : read configuration from stdin (for use in scripts)"
  echo "  fetch proto://url/     : downloads a config (tftp, http)"
}

do_write() {
  local target="$1"
  shift
  case "$target" in
    flash|"") save-etc ${FORCE:+-f }"$@" ;;
    "-")      save-etc -s ;;
    *)        save-etc -s > "$target" ;;
  esac
}

do_changes() {
  local list
  if [ "$1" = "-q" ]; then
    save-etc -v -l
  else
    list="$(save-etc -v -l)"
    if [ "$?" -eq 0 -a -n "$list" ]; then
      ( cd / ; ls -adrlt $list )
    fi
  fi
}

do_diff() {
  if [ "$1" = "factory" ]; then
    save-etc -d 2>/dev/null
  elif [ -z "$1" -o "$1" = "flash" ]; then
    restore-etc -d 2>/dev/null
  else
    echo "Need to specify either \"flash\", \"factory\", or nothing (defaults to flash)."
    exit 1
  fi
  exit 0
}

do_send() {
  local proto server defp port file tmp

  file="$1"; proto=""; server=""; port=""
  [ -z "${file##*://*}" ] && proto="${file%%://*}"
  file="${file#*://}" ; proto="${proto:-tftp}"

  case "$proto" in
    tftp) defp=69;;
    *) echo "Unsupported protocol for send operation : $proto";return 1;;
  esac

  [ -n "${file}" -a -z "${file##*/*}" ] || file="${file}/"
  server="${file%%/*}"
  if [ -n "$server" ]; then
    file="/${file#*/}"
  fi
  [ -z "${server##*:*}" ] && port="${server#*:}"
  server="${server%%:*}" ; port="${port:-$defp}"
  if [ -z "$server" ]; then
    read -p "Enter server address for $proto download : " server
    if [ -z "$server" ]; then echo "Aborting."; return 1; fi
  fi
  if [ -z "${file%%*/}" ]; then
    tmp="${file}$(uname -n)-$(date +%Y%m%d-%H%M).bin"
    echo "Using $tmp as the default remote file name."
    read -p "Enter file location on $server : " file
    [ -z "$file" ] && file="$tmp"
  fi

  rm -rf /tmp/.config.*.* 2>/dev/null
  tmp="/tmp/.config.$$.$RANDOM"
  while ! mkdir -m 0700 $tmp; do
    tmp="/tmp/.config.$$.$RANDOM"
  done
  tmp="$tmp/send"

  rm -f "$tmp"
  if ! save-etc -s >"$tmp"; then
    echo "Error while making local configuration image. Aborting."
    rm -f "$tmp" ; rmdir "${tmp%/*}"
    return 1
  fi

  file="${file#/}"
  #echo "proto=$proto server=$server port=$port file=$file"
  echo "Sending current configuration to $proto://$server:$port/$file ..."

  if [ "$proto" = "tftp" ]; then
    if ! tftp "$server" "$port" -c put "$tmp" "${file#/}"; then
      echo "Error during transfer. Aborting."
      rm -f "$tmp" ; rmdir "${tmp%/*}"
      return 1
    else
      echo "Configuration successfully saved."
      rm -f "$tmp" ; rmdir "${tmp%/*}"
      return 0
    fi
  fi
  # unknown proto
  rm -f "$tmp" ; rmdir "${tmp%/*}"
  return 1
}


do_fetch() {
  local proto server defp port file tmp err

  file="$1"; proto=""; server=""; port=""
  [ -z "${file##*://*}" ] && proto="${file%%://*}"
  file="${file#*://}" ; proto="${proto:-tftp}"

  case "$proto" in
    tftp) defp=69;;
    http) defp=80;;
    *) echo "Unsupported protocol for fetch operation : $proto";return 1;;
  esac

  [ -z "${file##*/*}" ] && server="${file%%/*}"
  if [ -n "$server" ]; then
    file="/${file#*/}"
  fi
  [ -z "${server##*:*}" ] && port="${server#*:}"
  server="${server%%:*}" ; port="${port:-$defp}"
  if [ -z "$server" ]; then
    read -p "Enter server address for $proto download : " server
    if [ -z "$server" ]; then echo "Aborting."; return 1; fi
  fi
  if [ -z "$file" ]; then
    read -p "Enter file location on $server : " file
    if [ -z "$file" ]; then echo "Aborting."; return 1; fi
  fi

  file="${file#/}"
  #echo "proto=$proto server=$server port=$port file=$file"
  echo "Fetching $proto://$server:$port/$file ..."

  rm -rf /tmp/.config.*.* 2>/dev/null
  tmp="/tmp/.config.$$.$RANDOM"
  while ! mkdir -m 0700 $tmp; do
    tmp="/tmp/.config.$$.$RANDOM"
  done
  tmp="$tmp/fetch"

  rm -f "$tmp"
  if [ "$proto" = "tftp" ]; then
    tftp "$server" "$port" -c get "$file" "$tmp"
  else
    ( exec <>/dev/tcp/$server/$port &&
      printf "GET /$file HTTP/1.0\r\nHost: $server:$port\r\n\r\n" >&0 &&
      while read -t 10 rep; do
        if [ ${#rep} -lt 2 ]; then
          dd of="$tmp" 2>/dev/null
          break
        fi
      done
    )
  fi
  if [ ! -s "$tmp" ]; then
    echo "Error during transfer. Aborting."
    rm -f "$tmp" ; rmdir "${tmp%/*}"
    return 1
  fi
  echo "Transfer complete."

  config_restore "$tmp" ; err=$?
  rm -f "$tmp" ; rmdir "${tmp%/*}"
  return $err
}

do_read() {
  local src err tmp

  src="$1"
  shift

  case "$src" in
    "") do_help; return 1;;
    "-")
	rm -rf /tmp/.config.*.* 2>/dev/null
	tmp="/tmp/.config.$$.$RANDOM"
	while ! mkdir -m 0700 $tmp; do
	    tmp="/tmp/.config.$$.$RANDOM"
	done
	tmp="$tmp/read"; rm -f "$tmp"
	dd of="$tmp" && config_restore "$tmp" ; err="$?"
	rm -f "$tmp" ; rmdir "${tmp%/*}"
	return $err
	;;
    *)  config_restore "$src" ;;
  esac
}

# may be called with service name in $1 and instance name in $2. Starts vi on the
# first line related to the service and instance.
do_edit() {
  local line
  line=$(grep -m1 -n "^[[:space:]]*service[[:space:]]\+$1[[:space:]]*$2" /etc/config.rc|cut -f1 -d:)
  vi ${line+-c ":$line"} /etc/config.rc
}

# {get|set|add|del} [ -f {cfg_file|"-"} ] <section>[.<inst>] <var>[-<subvar>] [<value>...]
# returns 0 on successful get, and on successful changes. Returns 1 on error or
# if file remains unchanged.
do_modify() {
  local file="/etc/config.rc"
  local act svc var val ret
  local filei fileo

  [ "$#" -ge 3 ] || { do_help; return 1; }

  act=$1; shift

  if [ "$1" = "-f" ]; then
    [ -n "$2" ] || { do_help; return 1;}
    file="$2"
    shift 2
  fi

  if [ "$file" = "-" ]; then
    filei="/dev/fd/3";
    fileo="/dev/stdout";
  elif [ -f "$file" -a "$act" = "get" ]; then
    filei="${file}"
    fileo="/dev/null"
  elif [ -f "$file" ]; then
    filei="${file}"
    fileo="${file}-"
    if ! cp -a "$file" "$fileo"; then
      echo "Error: could not create temporary file '$fileo'."
      return 1
    fi
  else
      echo "Error: configuration file '$file' not found."
      return 1
  fi

  [ "$#" -ge 2 ] || { do_help; return 1; }
  svc="$1"; shift
  var="$1"; shift
  val="$*"; shift

  [ -n "$var" ] || { do_help; return 1; }

  awk -v filei="$filei" -v fileo="$fileo" -v act="$act" -v svc="$svc" -v var="$var" -v val="$val" -f - 3<&0 << "EOF"
  # this script returns 0 if changes were made, 1 if OK with no changes, 2 on error.
  function die(msg) {
    print msg > "/dev/stderr"
    exit(2);
  }
  BEGIN {
    # check for service and instance name if any
    dotpos = index(svc, ".");
    if (dotpos) {
	subsec = 1;
	sec_name = substr(svc, 0, dotpos - 1);
	sub_name = substr(svc, dotpos + 1);
    }
    else {
	subsec = 0;
	sec_name = svc;
	sub_name = "";
    }

    var_fields = split(var, var_words, "-");
    val_fields = split(val, val_words);
    sec_matches = 0;
    var_matches = 0;
    val_matches = 0;
    change_done = 0;

    cur_line = 0; # start numbering at 1
    last_sec_line = add_line = rep_line = 0;
    last_sec_pref = add_pref = rep_pref = "";
    end_of_desc = 0;
    nbget = nbdel = 0;

    # first pass : identify where to apply changes
    while ((getline < filei) > 0) {
      cur_line++;
      saved_line[cur_line] = $0;

      newsec=0;
      if ($1 == "service" || $1 == "no" && $2 == "service") {
        insec=0;
        end_of_desc=0;
      }

      if ($1 == "service" && $2 == sec_name && (!subsec || $3 == sub_name)) {
        newsec=1;
        insec=1;
        sec_matches++;
      }
      else if ($1 == "no" && $2 == "service" && $3 == sec_name &&
              (!subsec || $4 == sub_name)) {
        newsec=1;
        insec=1;
        sec_matches++;
      }
      if (sec_matches > 1)
        die("Multiple matching sections");

      if (insec && $1 != "" && (!end_of_desc || $1 !~ "^#")) {
        # valid word still in current section, or initial comments. Keep
        # formating in memory for later use.
        last_sec_line = cur_line;
        idx = index($0, $1);
        last_sec_pref = (idx > 0) ? substr($0, 0, idx - 1) : "";
        if (newsec)
          last_sec_pref = last_sec_pref "    ";
      }

      if (!insec || newsec || $1 ~ "^#")
        continue;

      end_of_desc=1;

      if ($1 == "")
        continue;

      # we have a variable here, check that it matches the whole variable prefix.
      for (f = 1; f <= var_fields; f++) {
        if (var_words[f] != "*" && var_words[f] != $f)
          break;
      }

      if (f <= var_fields)
        continue;

      # we have the same variable name. In case of deletion, we may also want
      # to compare values.

      if (act == "del" && val_fields) {
        for (f = 1; f <= val_fields; f++) {
          if (val_words[f] != $(f+var_fields))
            break;
        }

        if (f <= val_fields)
          continue;
      }

      # we have the exact same variable and values
      var_matches++;
      if (var_matches > 1 && (act == "set"))
        die("Multiple matching variables");

      if (act == "get") {
        get_line[nbget] = cur_line;
        get_pref[nbget] = last_sec_pref;
        nbget++;
      }
      else if (act == "set") {
        rep_line = cur_line;
        rep_pref = last_sec_pref;
      }
      else if (act == "del") {
        del_line[nbdel] = cur_line;
        del_pref[nbdel] = last_sec_pref;
        nbdel++;
      }
      else if (act == "add") {
        add_line = cur_line;
        add_pref = last_sec_pref;
      }
    }
    close(filei);

    if (sec_matches == 0)
      die("No matching section found");

    if (act == "get") {
      if (var_matches == 0) {
        die("No matching variable");
      }
      else {
        for (i = 0; i < nbget; i++)
          printf("%s\n", substr(saved_line[get_line[i]], length(get_pref[i])+1));
        exit(1); # no error, no change
      }
    }

    if (var_matches == 0 && (act == "set" || act == "add")) {
      add_line = last_sec_line;
      add_pref = last_sec_pref;
    }

    # second pass: apply changes to the file if any. Standard input gets
    # sent to stdout.

    # recreate an empty file
    printf("") > fileo;

    for (line = 1; line <= cur_line; line++) {
      for (i = 0; i < nbdel; i++) {
        if (line == del_line[i])
          break;
      }
      if (i < nbdel) {
        # skip that line, it will automatically be deleted
        change_done = 1;
        continue;
      }

      if (line == rep_line) {
        # we want to replace this line with the new one
        printf("%s", rep_pref) >> fileo;
        for (f = 1; f <= var_fields; f++) {
          printf("%s", var_words[f]) >> fileo;
          if (f < var_fields)
            printf("%s", FS) >> fileo;
        }
        if (val > "")
          printf(" %s", val) >> fileo;
        printf("\n") >> fileo;
        change_done = 1;
        continue;
      }

      printf("%s\n", saved_line[line]) >> fileo;

      if (line == add_line) {
        # we want to add a line after this one
        printf("%s", add_pref) >> fileo;
        for (f = 1; f <= var_fields; f++) {
          printf("%s", var_words[f]) >> fileo;
          if (f < var_fields)
            printf("%s", FS) >> fileo;
        }
        if (val > "")
          printf(" %s", val) >> fileo;
        printf("\n") >> fileo;
        change_done = 1;
      }
    }
    exit(!change_done);
  }
EOF
  ret=$?
  if [ "$file" != "-"  -a "$fileo" != "/dev/null" ]; then
    [ $ret -eq 0 -a -s "$fileo" ] && mv "$fileo" "$file"
    rm -f "$fileo"
  fi
  # we return an error only when test is >1
  test $ret -le 1
}

arg0="$0"
cmd="$1"
while [ "${cmd:0:1}" = "-" ] ; do
	case "${cmd:1:1}" in
		f) FORCE=1 ;;
		*) echo "Unknown option \'$cmd\'" ; return 1 ;;
	esac
	shift
	cmd="$1"
done

shift
case "$cmd" in
  edit)    do_edit "$@" ;;
  changes) do_changes "$@" ;;
  diff)    do_diff "$@" ;;
  write)   do_write "$@" ;;
  save)    do_write flash ;;
  send)    do_send "$@" ;;
  read)    do_read "$@" ;;
  fetch)   do_fetch "$@" ;;
  get|set|add|del) do_modify "$cmd" "$@" ;;
  *)
    do_help "$@"
    [ "$cmd" = "help" -o "$cmd" = "-h" ]
    exit $?
    ;;
esac

