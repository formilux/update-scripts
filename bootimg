#!/bin/sh

# This script tries to fetch a boot image from various sources, and updates the
# system with it if possible. It can also automatically fetch an updated
# version for the current software branch. It returns 0 if an update has been
# performed, 1 if there was an error, and 2 if the system is already up to date
# (which means that there's no reason to reboot).

bootimage_save() {
  local ver err
  local tmp="$1"

  ver=$(update-boot-image -n -v -q "$tmp")
  err=$?
  if [ $err -ne 0 ]; then
    if [ $err = 2 ]; then
      echo "This image is invalid, please try another one."
    else
      echo "Internal error. Please retry, reboot then report."
    fi
    return 1
  fi

  echo "Software image version $ver. Please wait while writing to flash..."
  update-boot-image -q "$tmp"
  err=$?

  if [ $err -gt 0 ]; then
    case $err in
      2) echo "This image is invalid ! Please try another image." ;;
      3) echo "Cannot access flash. Please format it from the Maintenance Kernel." ;;
      4) echo "Cannot write to flash. Please unprotect or format it." ;;
      5) echo "Failed to save the image. I need to delete the current image. The system"
         echo "will be unusable until successful save. !!! DO NOT TURN THE POWER OFF !!!"
         echo "Please wait for write completion. This can take one minute..."
         if ! update-boot-image -f -q "$tmp"; then
           echo;echo "Failed again. You should reformat the partition from the Maintenance Kernel."
         else
           echo;echo "Image saved successfully. It will be used at next reboot."
           err=0
         fi
         ;;
      *) do_prompt "Internal error. Please retry, reboot then report." ;;
    esac
  else
    echo "Image saved successfully. It will be used at next reboot."
  fi
  return $err
}

do_help() {
  echo "Usage: ${arg0##*/} <command> [args...]"
  echo "Valid commands :"
  echo "  read <file>        : read boot image from <file>"
  echo "  read -             : read boot image from stdin (for use in scripts)"
  echo "  fetch proto://url/ : downloads a boot image (tftp, http)"
  echo "  fetch update       : automatically downloads the best update image"
}

# Performs an HTTP get request.
# Warning: does not handle connection timeout.
# server=$1 ; port=$2 ; absolute uri=$3; output_file=$4 (optionnal)
# sends output on stdout. It returns :
#  - 0 if everything's OK
#  - 1 if a network error occured or if no header was sent.
#  - 2 for return codes 3xx, 4xx or 5xx
# This should be replaced by wget.
do_http_get() {
  ( exec <>/dev/tcp/$1/$2 && 
    printf "GET $3 HTTP/1.0\r\nHost: $1:$2\r\n\r\n" >&0 &&
    while read -t 10 rep; do
      [ -n "$rep" -a -z "${rep##HTTP/1.? [345][0-9][0-9]*}" ] && exit 2
      if [ ${#rep} -lt 2 ]; then
        exec dd ${4:+"of=$4"}
      fi
    done
    exit 1
  ) 2>/dev/null
}

# Performs an HTTP get request via proxy.
# Warning: does not handle connection timeout.
# server=$1 ; port=$2 ; absolute uri=$3; output_file=$4 (optionnal)
# http_proxy=$5 (optionnal default $http_proxy)
# sends output on stdout. It returns :
#  - 0 if everything's OK
#  - 1 if a network error occured or if no header was sent.
#  - 2 for return codes 3xx, 4xx or 5xx
# This should be replaced by wget.
do_http_proxy_get() {
  # get proxy
  local proxy_url="${5:-$http_proxy}"
  # remove classical http_proxy definition
  proxy_url="${proxy_url#http://}"
  proxy_url="${proxy_url%/}"
  # check proxy value
  [ -n "${proxy_url//[0-9:.]/}" ] \
    && echo "bad proxy ${5:-$http_proxy}" && return 1

  # split proxy value in each component
  local proxy_server="${proxy_url##*@}"
  local proxy_port="${proxy_server#*:}"
  proxy_server="${proxy_server%:*}"
  [ "$proxy_port" = "$proxy_server" ] && proxy_port=8080

  # auth value
  local proxy_auth="${proxy_url%@*}"
  # TODO support of proxy auth
  # need b64 function to encode proxy_auth in base64
  [ "$proxy_auth" = "$proxy_url" ] \
    && proxy_auth="" \
    || proxy_auth=$(: base64 "$proxy_auth")

  # connect via proxy
  ( exec <>/dev/tcp/$proxy_server/$proxy_port &&
    ( printf "GET http://$1:$2$3 HTTP/1.0\r\n"
      printf "Host: $1:$2\r\n"
      [ -n "$proxy_auth" ] && printf "WWW-Authenticate: $proxy_auth\r\n"
      printf "\r\n" ) >&0 &&
    while read -t 10 rep; do
      [ -n "$rep" -a -z "${rep##HTTP/1.? [345][0-9][0-9]*}" ] && exit 2
      if [ ${#rep} -lt 2 ]; then
        exec dd ${4:+"of=$4"}
      fi
    done
    exit 1
  ) 2>/dev/null
}

# usage: $0 <proto> <server> <port> <file> [<output>]
do_network_get() {
  local proto server port file output
  proto="$1"; server="$2"; port="$3"; file="$4"; output="$5"
  rm -f "$output"
  if [ "$proto" = "tftp" ]; then
    tftp "$server" "$port" -c get "$file" ${output:+"$output"}
  elif [ -n "$http_proxy" ] ; then
    do_http_proxy_get "$server" "$port" "/$file" ${output:+"$output"}
  else
    do_http_get "$server" "$port" "/$file" ${output:+"$output"}
  fi
}

do_fetch() {
  local proto server defp port file tmp err ver update

  file="$1"; proto=""; server=""; port=""; update=0

  if [ "$file" = "update" ]; then
    url="$(grep "^URL:" /usr/share/factory/version|cut -f2- -d' ')"
    if [ -n "$url" ]; then
      file="$url"
      update=1
    else
      echo "Unknown update URL."
      file=""
    fi
  fi

  [ -z "${file##*://*}" ] && proto="${file%%://*}"
  file="${file#*://}" ; proto="${proto:-tftp}"

  case "$proto" in
    tftp) defp=69;;
    http) defp=80;;
    *) echo "Unsupported protocol for fetch operation : $proto";return 1;;
  esac

  [ -z "${file##*/*}" ] && server="${file%%/*}"
  if [ -n "$server" ]; then
    file="/${file#*/}"
  fi
  [ -z "${server##*:*}" ] && port="${server#*:}"
  server="${server%%:*}" ; port="${port:-$defp}"

  rm -rf /tmp/.bootimg.*.* 2>/dev/null
  tmp="/tmp/.bootimg.$$.$RANDOM"
  while ! mkdir -m 0700 $tmp; do
    tmp="/tmp/.bootimg.$$.$RANDOM"
  done
  tmp="$tmp/fetch"

  if [ "$update" = 1 ]; then
    branch="$(grep "^Branch:" /usr/share/factory/version|cut -f2- -d' ')"
    version="$(grep "^Version:" /usr/share/factory/version|cut -f2- -d' ')"
    model="$(grep "^Model:" /usr/share/factory/version|cut -f2- -d' ')"
    build="$(grep "^Build:" /usr/share/factory/version|cut -f2- -d' ')"
    file="${file#/}"

    echo "Checking for updates ..."
    f1="$file"
    do_network_get "$proto" "$server" "$port" "$f1/.maint.$model" "$tmp"
    err=$?
    if [ $err = 1 ]; then
      # .maint.$model might not exist but must not return an error
      echo "Error during transfer. Aborting."
      rm -f "$tmp"; rmdir "${tmp%/*}"
      return 1
    fi

    # the $tmp file might contain a subdirectory component
    [ $err = 0 ] && f1="${f1}"/"$(head -1 "$tmp")"
    do_network_get "$proto" "$server" "$port" "$f1/.update.$model" "$tmp"
    err=$?
    if [ $err -eq 2 ]; then
      # .update.$model must exist
      echo "Model=$model, Branch=$branch, Version=$version-$build"
      echo "No update found for this model/branch combination. Contact your vendor."
      rm -f "$tmp"; rmdir "${tmp%/*}"
      return 1
    elif [ $err -gt 0 ]; then
      # .update.$model must exist
      echo "Error during transfer. Aborting."
      rm -f "$tmp"; rmdir "${tmp%/*}"
      return 1
    fi

    # the "$tmp" file must now contain the file name relative to the
    # $f1 directory, without its extensions. Eg: "al12k-1.0.1-1029".
    f3="$(head -1 "$tmp")"
    if [ -n "${f3##$model-*}" ]; then
      echo "Fatal: wrong model for image $f3 ! Contact your vendor (your model is $model)."
      rm -f "$tmp"; rmdir "${tmp%/*}"
      return 1
    fi

    if [ "$f3" = "$model-$version-$build" ]; then
      echo "System already up to date (version $version-$build). No update needed.".
      rm -f "$tmp"; rmdir "${tmp%/*}"
      return 2
    fi

    file="$f1/$f3.bin"
    file="${file#/}"
    echo "Fetching last update from $proto://$server:$port/ ..."
  else
    # this is not an update
    if [ -z "$server" ]; then
      read -p "Enter server address for $proto download : " server
      if [ -z "$server" ]; then echo "Aborting."; return 1; fi
    fi
    if [ -z "$file" ]; then
      read -p "Enter file location on $server : " file
      if [ -z "$file" ]; then echo "Aborting."; return 1; fi
    fi
    file="${file#/}"
    echo "Fetching $proto://$server:$port/$file ..."
  fi

  do_network_get "$proto" "$server" "$port" "$file" "$tmp"

  if [ ! -s "$tmp" ]; then
    echo "Error during transfer. Aborting."
    rm -f "$tmp" ; rmdir "${tmp%/*}"
    return 1
  fi
  echo "Transfer complete."

  bootimage_save "$tmp"
  err=$?
  rm -f "$tmp" ; rmdir "${tmp%/*}"
  return $err
}


do_read() {
  local src err tmp

  src="$1"
  shift

  case "$src" in
    "") do_help; return 1;;
    "-")
	rm -rf /tmp/.bootimg.*.* 2>/dev/null
	tmp="/tmp/.bootimg.$$.$RANDOM"
	while ! mkdir -m 0700 $tmp; do
	    tmp="/tmp/.bootimg.$$.$RANDOM"
	done
	tmp="$tmp/read"; rm -f "$tmp"
	dd of="$tmp" && bootimage_save "$tmp" ; err="$?"
	rm -f "$tmp" ; rmdir "${tmp%/*}"
	return $err
	;;
    *)  bootimage_save "$src" ;;
  esac
}

arg0="$0"
cmd="$1"
shift
case "$cmd" in
  read)    do_read "$@" ;;
  fetch)   do_fetch "$@" ;;
  *)
    do_help "$@"
    [ "$cmd" = "help" -o "$cmd" = "-h" ]
    exit $?
    ;;
esac

